//服务器 emit-> 客户端
作用                事件名              数据
1.接收注册状态        regist_state    { registstate } //registstate:注册状态
2.接收登录状态        login_state     { loginstate }  //loginstate:登录状态
3.获取广告详情        ad_trans        { { game_summary, game_id, game_name, game_auth, publish_date, cost, type_Moba, type_CardAndChess, group_cost, game_pict } }
//game_summary:游戏简介, game_id:游戏号码, game_auth: 游戏作者, publish_date:出版日期, cost:原价, type_CardAndChess:是否为棋牌类游戏， type_Moba:是否为Moba类游戏, group_cost:拼团后价格, game_pict:游戏图片
4.获取广告概览        ad_get          { requirestate, adcount, ads{ adid, gameid, adpict } }//requirestate:是否获取成功, adcount:广告数量, ads:广告{ adid: 广告号码, gameid:对应游戏号码, adpict:广告图片 }
5.获取即时状态        state           { state }   //state, 状态信息
6.获取拼团概览        group_get       { group_count, groups{ group_id, game_id, user_count, owner{ user_name, sex, birth, user_pict } } }
//group_count:拼团信息数量, groups:拼团信息{
    group_id: 拼团号码,
    game_id: 游戏号码,
    user_count: 相差人数,
    owner:团长信息{
        user_name: 用户名,
        sex: 用户性别,
        birth: 用户生日,
        user_pict: 用户头像
        }
    }
7.发送用户查询结果    rearch_response     { string game_count;gamepart_info[] game_p; }
//game_part{
        string game_count;  //一共查询到的游戏个数;
        gamepart_info[] game_p;  //游戏的部分信息 }
//game_p{
    public string game_id;  //游戏ID
    public string game_name;//游戏名称
    public string game_pict;//游戏图片
    public string type_Moba;//游戏类型
    public string type_CardAndChess;//游戏类型}
8.发送登录用户的信息    user_info       { public string user_id;public string user_name;public string user_pic;public string user_pic;public string user_password; public string user_birth; public Boolean user_sex;public string user_contents; public string game_counts; public games_info[] games;}
//public class user_information : MonoBehaviour
{
    public string user_id;
    public string user_name;
    public string user_pic;
    public string user_password;
    public string user_birth;
    public Boolean user_sex;    //true代表女，false代表男
    public string user_contents;//用户介绍
    public string game_counts;//用户拥有的游戏数目，包括正在购买的游戏
    public games_info[] games;//具体的游戏信息
        // Use this for initialization
        void Start()
        {

        }
        // Update is called once per frame
        void Update()
        {

        }
        public void copy(user_information x)
        {
        this.user_id = x.user_id;
        this.user_name = x.user_name;
        this.user_pic=x.user_pic;
        this.user_password = x.user_password;
        this.user_sex = x.user_sex;
        this.user_birth = x.user_birth;
        this.user_contents = x.user_contents;
        this.game_counts = x.game_counts;
        this.games=x.games;
        }
}

//public class games_info
{
    public string game_id;
    public string game_name;
    public string game_auth;
    public string buy_time;  //购买的时间，如果还在购买中，返回null
    public Boolean isbought;//是否购买，true为已经购买，false为还未成功购买

}

//客户端 emit-> 服务器
作用                      事件名                  数据
1.请求注册一个账号          regist              { user_id, password, user_name, （sex）, （birth）, e_mail, phone } //user_id e_mail phone至少发送一个
2.请求一次账号登录          login               { account, password }
3.批量请求游戏概览          games_require       { times }       //times:批量请求游戏时的批次
4.请求单个广告详情          trans_ad            { ad_num }      //ad_num:广告的号码
5.请求一些广告概览          require_ad          {}
6.请求对应拼团概览          groups_require      { game_id }     //game_id:请求游戏的号码
7.请求创建对应拼团          create_group        { game_id }     //game_id:请求创建拼团的游戏号码
8.请求加入单个拼团          join_group          { group_id }    //group_id:请求加入的拼团号码
9.请求退出单个拼团          quit_group          { group_id }
10.请求删除单个拼团         delete_group        { group_id }
11.在主页上请求查询一个游戏  main_search         { search } //search:用户输入在查询框输入的内容
12.请求进入“我的”页面       user_require          {}
